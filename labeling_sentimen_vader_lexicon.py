# -*- coding: utf-8 -*-
"""labeling sentimen vader lexicon.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1Sl6HONK0QCYmqzLRmNfvK3H_jvo6kzx9

# **Labelin Sentimen**

Labelin sentimen disini menggunakan Library Vader Lexicon dari NLTK. Cara kerja library ini yakni dengan cara memberikan skor sentimen pada setiap katanya, kemudian menjumlahkannya pada setiap datanya, dan menentukan hasil skor tersebut apakah bersentimen negatif, positif atau netral. Untuk catatan, library ini hanya bisa mendektesi bahasa inggris saja, maka dari itu data sebelum diproses labelin diubah terlebih dahulu kedalam bahasa inggris menggunakan Library googletrans.

1. import modul yang dibutukan, baik untuk dataframe, translate, dan labelin sentimen.
"""

#modul dataframe
import pandas as pd

#modul yang dibutuhkan untuk translate
!pip install googletrans==3.1.0a0
import googletrans
from googletrans import Translator
translator = Translator()
pd.set_option('max_colwidth', 300)

#import modul yang dibuthkan labelin vader
import nltk
nltk.download('vader_lexicon')
from nltk.sentiment.vader import SentimentIntensityAnalyzer
sid = SentimentIntensityAnalyzer()

"""2. Memanggil dataset yang akan diproses."""

#masukan data hasil preprocessing
df = pd.read_csv('preprocessing_data-gabungan_keyword.csv')
df

"""3.  mencari bahasa dan kode bahasa yang akan digunakan. Disini menggunakan bahasa inggris dan bahasa indonesia. Kode bahasa ini bertujuan untuk proses translate nanti."""

# cari code indonesia, dan inggris
lang_df[lang_df.Language.isin(['english', 'indonesian'])]

"""4. Proses translate. Untuk data yang dipakai yakni hasil dari preprocessing text sebelumnya yang mana yakni pada kolom to_sentence. Proses translate dilakukan dengan menggunakan kode bahasa yang sudah dicari tadi. untuk fungsi src merupakan kode untuk data bahasa yang kita punya, dan dest merupakan kode untuk data bahasa yang ingin kita ubah. Setelah proses translate berhasil, data translate akan di masukan kedalam kolom baru bernama english."""

#Translate ke English
translate = pd.DataFrame(df['to_sentence']) # hasil akhir dari preprocessing data
translate['english'] = translate['to_sentence'].apply(lambda x: translator.translate(x, src='id', dest='en').text)
translate.head()

"""5. Jika data sudah berhasil ditranslate, data translate langsung diproses kembali untuk pengskoran setiap katanya oleh vader lexicon. sid.polarity_scores, kode ini berfungsi untuk menghitung skor pada kolom english, dan hasilnya akan di apply kedalam kolom baru bernama scores."""

#proses pengskoran kata
sid.polarity_scores(translate.iloc[0]['english'])
translate['scores'] = translate['english'].apply(lambda x : sid.polarity_scores(str(x)))
translate.head()

"""6. Kemudian melakukan penjumlahan akhir pada kolom skor, dan mengapplynya pada kolom baru bernama compund."""

#penjumlahan skor
translate['compound']  = translate['scores'].apply(lambda score_dict: score_dict['compound'])
translate.head()

"""7. Menentukan sentimen berdaharkan hasil compound. Ketentuannya, untuk nilai skor diatas 0.0000 merupakan sentimen positif, 0.0000 netral dan kurang dari 0.0000 merupakan sentimen negatif. Dan mengapplynya pada kolom baru bernama sentimen."""

#pelabelan skor dengan 3 kelas
def condition(c):
    if c > 0.0000:
        return "Positive"
    elif c < 0.0000:
        return "Negative"
    else:
        return 'Neutral'

translate['sentiment'] = translate['compound'].apply(condition)
translate.head()

"""8. Menghapus kolom english_to_sentence yang sudah tidak digunakan kembali."""

#menghapus kolom translate
del(translate["english"])
translate.head()

"""9. Simpan kedalam format csv hasilnya."""

#simpan kedalam csv
translate.to_csv('labeling_sentimen-gabungan_keyword.csv', sep=',', index=False)



"""# **Jumlah dan Presentase Data Berdasarkan Jenis Sentimen**

Menghitung jumlah data berdasarkan sentimennya dengan menggunakan fungsi code value_counts(). Kemudian menghitung presentase dari jumlah tersebut dengan membulatkan presentase menjadi satu angka desimal, dan membuat DataFrame baru yang berisi hasilnya.
"""

sentimen_counts = translate['sentiment'].value_counts()  #Menghitung jumlah data persentimennya
total_data = len(translate)
sentimen_percentages = (sentimen_counts / total_data) * 100    #Menghitung presentase
sentimen_percentages = sentimen_percentages.round(1).astype(str) + '%'    #Membuat 1 angka dibelakang koma
result_df = pd.DataFrame({'Sentiment': sentimen_counts.index, 'Jumlah': sentimen_counts.values, 'Presentase': sentimen_percentages.values})
result_df

"""Visualisasinya dalam bentuk diagram pie dengan library matplotlib."""

import matplotlib.pyplot as plt

plt.figure(figsize=(8, 8))
plt.pie(sentimen_counts, labels=sentimen_counts.index, autopct=lambda p: '{:.1f}%\n({:.0f})'.format(p, p * sum(sentimen_counts) / 100),
        startangle=140)

plt.legend(sentimen_counts.index, title='Sentimen', loc='center', bbox_to_anchor=(1, 0.5))
plt.title('Diagram Pie Sentimen')

plt.savefig('diagram_sentimen-pie.png')
plt.show()
plt.close()

#Membuat diagram batang
plt.figure(figsize=(8, 6))
sentimen_counts.plot(kind='bar', color='skyblue')
plt.xlabel('Sentimen')
plt.ylabel('Jumlah')
plt.title('Diagram Batang Sentimen')
plt.xticks(rotation=45)

#Menambahkan keterangan nilai di atas diagram batang
for index, value in enumerate(sentimen_counts):
    plt.text(index, value + 0.1, str(value), ha='center')


plt.savefig('diagram_sentimen-batang')
plt.show()
plt.close()